@page "/staff"
@using egorDipl.Data.Models
@inject HttpClient Http
@inject IUserProvider UserProvider
@rendermode InteractiveServer

<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />

    <style>
        body {
            background-color: black;
            color: white;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }

        .container {
            display: flex;
            min-height: 100vh;
        }

        /* Фильтры */
        .filters {
            width: 300px;
            padding: 20px;
            background-color: #111;
            border-right: 1px solid #333;
            font-family: Nozhik;
            font-size: 2em;
        }

        .filter-section {
            margin-bottom: 20px;
        }

            .filter-section h3 {
                color: #007bff;
                margin-bottom: 10px;
                font-family: Nozhik;
                font-size: 1.2em;
            }

        .filter-option {
            margin-bottom: 8px;
        }

            .filter-option label {
                display: block;
                margin-bottom: 5px;
            }

            .filter-option select,
            .filter-option input {
                width: 100%;
                padding: 8px;
                background-color: #222;
                color: white;
                border: 1px solid #333;
                border-radius: 4px;
            }

        /* Основной контент */
        .content {
            flex: 1;
            padding: 20px;
        }

        .company-info {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #222;
            border-radius: 8px;
        }

            .company-info h2 {
                margin-top: 0;
                color: #007bff;
            }

            .company-info .staff-count {
                color: #aaa;
                font-size: 1.1rem;
            }

        .search-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            align-items: center;
            flex-direction: row;
        }

        .sort-dropdown {
            position: relative;
            display: inline-block;
            order: 1;
        }

        .search-bar {
            flex: 1;
            display: flex;
            position: relative;
            order: 2;
        }

            .search-bar input {
                flex: 1;
                padding: 10px;
                background-color: #222;
                color: white;
                border: 1px solid #333;
                border-radius: 4px;
                padding-right: 30px;
            }

            .search-bar .clear-btn {
                position: absolute;
                right: 8px;
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                color: #aaa;
                cursor: pointer;
                font-size: 16px;
                padding: 0 5px;
            }

                .search-bar .clear-btn:hover {
                    color: white;
                }

        .sort-dropdown {
            position: relative;
            display: inline-block;
            background: rgba(0, 123, 255, 0.3);
        }

        .sort-btn {
            padding: 10px 15px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

            .sort-btn:hover {
                background-color: #444;
            }

        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: #222;
            min-width: 200px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            border-radius: 4px;
            padding: 10px 0;
        }

            .dropdown-content.show {
                display: block;
            }

        .dropdown-item {
            padding: 8px 16px;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
        }

            .dropdown-item:hover {
                background-color: #333;
            }

            .dropdown-item.active {
                background-color: #007bff;
            }

        .reset-btn {
            color: #ff4444;
            margin-top: 5px;
            border-top: 1px solid #444;
            padding-top: 8px;
        }

            .reset-btn:hover {
                color: #ff6666;
            }

        .staff-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .staff-card {
            background-color: #222;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s;
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
        }

            .staff-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 123, 255, 0.3);
            }

            .staff-card h3 {
                color: #007bff;
                margin-top: 0;
                margin-bottom: 10px;
                grid-column: span 3;
            }

        .staff-detail {
            margin-bottom: 8px;
            font-size: 0.95rem;
        }

            .staff-detail strong {
                color: #aaa;
            }

        .staff-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
            grid-column: span 3;
        }

        .btn-edit {
            background-color: #ffc107;
            color: black;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }

            .btn-edit:hover {
                background-color: #e0a800;
            }

        .btn-delete {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }

            .btn-delete:hover {
                background-color: #c82333;
            }

        .admin-actions {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .admin-btn {
            padding: 10px 15px;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        .add-btn {
            background-color: #28a745;
            color: white;
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .modal-content {
            background-color: #333;
            color: white;
            padding: 0;
            border-radius: 8px;
            width: 450px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .modal-header {
            background-color: #222;
            padding: 15px 20px;
            text-align: center;
            border-bottom: 1px solid #444;
        }

            .modal-header h3 {
                margin: 0;
                font-size: 1.3rem;
                color: #007bff;
            }

        .modal-body {
            padding: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                color: #aaa;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 8px;
                background-color: #222;
                color: white;
                border: 1px solid #444;
                border-radius: 4px;
            }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 15px 20px;
            background-color: #222;
            border-top: 1px solid #444;
        }

            .modal-actions button {
                padding: 8px 15px;
                border-radius: 4px;
                cursor: pointer;
                font-weight: bold;
                border: none;
            }

            .modal-actions .save {
                background-color: #28a745;
                color: white;
            }

                .modal-actions .save:hover {
                    background-color: #218838;
                }

            .modal-actions .cancel {
                background-color: #dc3545;
                color: white;
            }

                .modal-actions .cancel:hover {
                    background-color: #c82333;
                }

        .error-message {
            color: #ff4444;
            margin-top: 10px;
            text-align: center;
        }

        .validation-message {
            color: #ff4444;
            font-size: 0.8rem;
            margin-top: 5px;
        }

        .input-error {
            border-color: #ff4444 !important;
        }

        .reset-filters-btn {
            width: 100%;
            padding: 10px;
            margin-top: 10px;
            background-color: #333;
            color: #ff4444;
            border: 1px solid #ff4444;
            border-radius: 4px;
            cursor: pointer;
        }

            .reset-filters-btn:hover {
                background-color: #444;
            }

        .apply-filters-btn {
            width: 100%;
            padding: 10px;
            margin-top: 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }

            .apply-filters-btn:hover {
                background-color: #218838;
            }

        .success-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        }

        .success-modal-content {
            background-color: #333;
            color: white;
            padding: 20px;
            border-radius: 8px;
            width: 300px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .success-message {
            margin-bottom: 20px;
            font-size: 1.1rem;
        }

        .success-ok-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }

            .success-ok-btn:hover {
                background-color: #218838;
            }

        .password-container {
            position: relative;
            display: flex;
            align-items: center;
        }

        .toggle-password {
            position: absolute;
            right: 8px;
            cursor: pointer;
            color: #aaa;
        }

            .toggle-password:hover {
                color: white;
            }
    </style>
</head>

<PageTitle>Сотрудники</PageTitle>

<div class="container">
    <div class="filters">
        <h2>Фильтры</h2>

        <div class="filter-section">
            <h3>Поиск по имени</h3>
            <div class="filter-option">
                <input type="text" placeholder="Фамилия, имя, отчество" @bind="searchQuery" />
            </div>
        </div>

        <div class="filter-section">
            <h3>Должность</h3>
            <div class="filter-option">
                <input type="text" placeholder="Введите должность" @bind="positionFilter" />
            </div>
        </div>

        <button class="apply-filters-btn" @onclick="ApplyFilters">Применить фильтры</button>
        <button class="reset-filters-btn" @onclick="ResetFilters">Сбросить фильтры</button>
    </div>

    <div class="content">
        <div class="company-info">
            <h2>@currentCompany?.Name</h2>
            <div class="staff-count">Сотрудников: @staff.Count</div>
        </div>

        <div class="search-container">
            <div class="sort-dropdown">
                <button class="sort-btn" @onclick="ToggleSortDropdown">
                    @GetSortButtonText()
                    <span>▼</span>
                </button>
                <div class="dropdown-content @(showSortDropdown ? "show" : "")">
                    <div class="dropdown-item @(selectedSort == "name_asc" ? "active" : "")"
                         @onclick='() => SetSort("name_asc")'>
                        По фамилии (A-Я)
                    </div>
                    <div class="dropdown-item @(selectedSort == "name_desc" ? "active" : "")"
                         @onclick='() => SetSort("name_desc")'>
                        По фамилии (Я-А)
                    </div>
                    <div class="dropdown-item @(selectedSort == "post_asc" ? "active" : "")"
                         @onclick='() => SetSort("post_asc")'>
                        По должности (A-Я)
                    </div>
                    <div class="dropdown-item @(selectedSort == "post_desc" ? "active" : "")"
                         @onclick='() => SetSort("post_desc")'>
                        По должности (Я-А)
                    </div>
                    <div class="dropdown-item reset-btn" @onclick="ResetSort">
                        Сбросить
                    </div>
                </div>
            </div>

            <div class="search-bar">
                <input type="text" placeholder="Поиск сотрудников..."
                       @bind="searchQuery" @oninput="HandleSearchInput" />
                @if (!string.IsNullOrEmpty(searchQuery))
                {
                    <button class="clear-btn" @onclick="ClearSearch">×</button>
                }
            </div>
        </div>

        <div class="staff-list">
            @foreach (var employee in filteredStaff)
            {
                <div class="staff-card">
                    <h3>@employee.Surname @employee.Name @employee.Patronymic</h3>

                    <div class="staff-detail">
                        <strong>Должность: </strong> @employee.Post
                    </div>

                    <div class="staff-detail">
                        <strong>Phone: </strong> @employee.UniCode
                    </div>

                    <div class="staff-detail password-container">
                        <strong>Пароль: </strong>
                        <span>@(showPasswords.Contains(employee.Id) ? employee.Password : new string('•', employee.Password?.Length ?? 0))</span>
                        <i class="fas @(showPasswords.Contains(employee.Id) ? "fa-eye-slash" : "fa-eye") toggle-password"
                           @onclick="() => TogglePasswordVisibility(employee.Id)"></i>
                    </div>

                    <div class="staff-detail">
                        <strong>Роль: </strong> @employee.Role?.Name
                    </div>

                    <div class="staff-detail">
                        <strong>Компания: </strong> @employee.Company?.Name
                    </div>

                    <div class="staff-actions">
                        <button class="btn-edit" @onclick="() => EditStaff(employee.Id)">Изменить</button>
                        @if (employee.Role?.Name != "Владелец")
                        {
                            <button class="btn-delete" @onclick="() => DeleteStaff(employee.Id)">Удалить</button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (UserProvider.Role != null && UserProvider.Role.Name != "Пользователь")
{
    <div class="admin-actions">
        <button class="admin-btn add-btn" @onclick="AddStaff" title="Добавить сотрудника">+</button>
    </div>
}

@if (showAddEditDialog)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>@(selectedStaff.Id == 0 ? "Добавить сотрудника" : "Редактировать сотрудника")</h3>
            </div>

            <div class="modal-body">
                <div class="form-group">
                    <label>Фамилия</label>
                    <input type="text" @bind="selectedStaff.Surname"
                           placeholder="Введите фамилию" class="@(submitClicked && string.IsNullOrEmpty(selectedStaff.Surname) ? "input-error" : "")" />
                    @if (submitClicked && string.IsNullOrEmpty(selectedStaff.Surname))
                    {
                        <div class="validation-message">Поле обязательно для заполнения</div>
                    }
                </div>

                <div class="form-group">
                    <label>Имя</label>
                    <input type="text" @bind="selectedStaff.Name"
                           placeholder="Введите имя" class="@(submitClicked && string.IsNullOrEmpty(selectedStaff.Name) ? "input-error" : "")" />
                    @if (submitClicked && string.IsNullOrEmpty(selectedStaff.Name))
                    {
                        <div class="validation-message">Поле обязательно для заполнения</div>
                    }
                </div>

                <div class="form-group">
                    <label>Отчество</label>
                    <input type="text" @bind="selectedStaff.Patronymic"
                           placeholder="Введите отчество" />
                </div>

                <div class="form-group">
                    <label>Должность</label>
                    <input type="text" @bind="selectedStaff.Post"
                           placeholder="Введите должность" class="@(submitClicked && string.IsNullOrEmpty(selectedStaff.Post) ? "input-error" : "")" />
                    @if (submitClicked && string.IsNullOrEmpty(selectedStaff.Post))
                    {
                        <div class="validation-message">Поле обязательно для заполнения</div>
                    }
                </div>

                <div class="form-group">
                    <label>Пароль</label>
                    <input type="text" @bind="selectedStaff.Password"
                           placeholder="Введите пароль" class="@(submitClicked && string.IsNullOrEmpty(selectedStaff.Password) ? "input-error" : "")" />
                    @if (submitClicked && string.IsNullOrEmpty(selectedStaff.Password))
                    {
                        <div class="validation-message">Поле обязательно для заполнения</div>
                    }
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }
            </div>

            <div class="modal-actions">
                <button class="cancel" @onclick="Cancel">Отмена</button>
                <button class="save" @onclick="ValidateAndSave">
                    @(selectedStaff.Id == 0 ? "Создать" : "Сохранить")
                </button>
            </div>
        </div>
    </div>
}

@if (showSuccessModal)
{
    <div class="success-modal">
        <div class="success-modal-content">
            <div class="success-message">@successMessage</div>
            <button class="success-ok-btn" @onclick="CloseSuccessModal">OK</button>
        </div>
    </div>
}

@code {
    private List<User> staff = new();
    private List<User> filteredStaff = new();
    private User selectedStaff = new();
    private Company? currentCompany;
    private bool showAddEditDialog = false;
    private bool showSortDropdown = false;
    private string selectedSort = "name_asc";
    private string searchQuery = string.Empty;
    private string positionFilter = string.Empty;
    private bool submitClicked = false;
    private string errorMessage = string.Empty;
    private bool filtersApplied = false;
    private bool showSuccessModal = false;
    private string successMessage = string.Empty;
    private List<int> showPasswords = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanyAndStaff();
    }

    private async Task LoadCompanyAndStaff()
    {
        try
        {
            // Загружаем текущего пользователя
            var currentUser = await Http.GetFromJsonAsync<User>($"api/User/{UserProvider.UserId}");
            if (currentUser == null)
            {
                errorMessage = "Пользователь не найден";
                return;
            }

            // Устанавливаем текущую компанию
            currentCompany = currentUser.Company;

            // Если компания не загрузилась, загружаем ее отдельно
            if (currentCompany == null && currentUser.CompanyId.HasValue)
            {
                currentCompany = await Http.GetFromJsonAsync<Company>($"api/Company/{currentUser.CompanyId}");
            }

            // Загружаем сотрудников компании
            if (currentCompany != null)
            {
                staff = await Http.GetFromJsonAsync<List<User>>($"api/User/company/{currentCompany.Id}")
                       ?? new List<User>();
            }
            else
            {
                staff = new List<User>();
            }

            ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке данных: {ex.Message}");
            errorMessage = "Произошла ошибка при загрузке данных";
            currentCompany = null;
            staff = new List<User>();
        }
    }

    private string GetSortButtonText()
    {
        return selectedSort switch
        {
            "name_asc" => "По фамилии (A-Я)",
            "name_desc" => "По фамилии (Я-А)",
            "post_asc" => "По должности (A-Я)",
            "post_desc" => "По должности (Я-А)",
            _ => "Сортировка"
        };
    }

    private void TogglePasswordVisibility(int userId)
    {
        if (showPasswords.Contains(userId))
        {
            showPasswords.Remove(userId);
        }
        else
        {
            showPasswords.Add(userId);
        }
    }

    private void ToggleSortDropdown()
    {
        showSortDropdown = !showSortDropdown;
    }

    private void SetSort(string sortOption)
    {
        selectedSort = sortOption;
        showSortDropdown = false;
        ApplyFiltersAndSort();
    }

    private void ResetSort()
    {
        selectedSort = "name_asc";
        showSortDropdown = false;
        ApplyFiltersAndSort();
    }

    private void ApplyFilters()
    {
        filtersApplied = true;
        ApplyFiltersAndSort();
    }

    private void ResetFilters()
    {
        filtersApplied = false;
        searchQuery = string.Empty;
        positionFilter = string.Empty;
        ApplyFiltersAndSort();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        ApplyFiltersAndSort();
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort();
    }

    private void ApplyFiltersAndSort()
    {
        var filtered = staff.AsEnumerable();

        // Фильтр по поисковой строке (работает всегда)
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filtered = filtered.Where(s =>
                (s.Surname?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (s.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (s.Patronymic?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Фильтр по должности (применяется только после нажатия кнопки)
        if (filtersApplied && !string.IsNullOrEmpty(positionFilter))
        {
            filtered = filtered.Where(s =>
                s.Post?.Contains(positionFilter, StringComparison.OrdinalIgnoreCase) ?? false);
        }

        // Сортировка
        filtered = selectedSort switch
        {
            "name_asc" => filtered.OrderBy(s => s.Surname),
            "name_desc" => filtered.OrderByDescending(s => s.Surname),
            "post_asc" => filtered.OrderBy(s => s.Post),
            "post_desc" => filtered.OrderByDescending(s => s.Post),
            _ => filtered.OrderBy(s => s.Surname)
        };

        filteredStaff = filtered.ToList();
        StateHasChanged();
    }

    private void AddStaff()
    {
        selectedStaff = new User
        {
            RoleId = 2, // Администратор
            UniCode = User.GenerateUniCode(),
            CompanyId = currentCompany?.Id,
            Password = GenerateRandomPassword()
        };
        showAddEditDialog = true;
        submitClicked = false;
        errorMessage = string.Empty;
    }

    private string GenerateRandomPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 8)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task EditStaff(int id)
    {
        selectedStaff = await Http.GetFromJsonAsync<User>($"api/User/{id}") ?? new User();
        showAddEditDialog = true;
        submitClicked = false;
        errorMessage = string.Empty;
    }

    private async Task ValidateAndSave()
    {
        submitClicked = true;
        errorMessage = string.Empty;

        if (string.IsNullOrEmpty(selectedStaff.Surname))
        {
            errorMessage = "Фамилия обязательна для заполнения";
            return;
        }

        if (string.IsNullOrEmpty(selectedStaff.Name))
        {
            errorMessage = "Имя обязательно для заполнения";
            return;
        }

        if (string.IsNullOrEmpty(selectedStaff.Post))
        {
            errorMessage = "Должность обязательна для заполнения";
            return;
        }

        if (string.IsNullOrEmpty(selectedStaff.Password))
        {
            errorMessage = "Пароль обязателен для заполнения";
            return;
        }

        await SaveStaff();
    }

    private async Task SaveStaff()
    {
        try
        {
            if (selectedStaff.Id == 0)
            {
                var response = await Http.PostAsJsonAsync("api/User", selectedStaff);
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = "Ошибка при создании сотрудника";
                    return;
                }
                successMessage = $"Сотрудник {selectedStaff.Name} успешно добавлен";
            }
            else
            {
                var response = await Http.PutAsJsonAsync($"api/User/{selectedStaff.Id}", selectedStaff);
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = "Ошибка при обновлении сотрудника";
                    return;
                }
                successMessage = $"Данные сотрудника {selectedStaff.Name} успешно обновлены";
            }

            showAddEditDialog = false;
            await LoadCompanyAndStaff();
            showSuccessModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private async Task DeleteStaff(int id)
    {
        try
        {
            var staffToDelete = staff.FirstOrDefault(s => s.Id == id);
            if (staffToDelete == null) return;

            var response = await Http.DeleteAsync($"api/User/{id}");
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Сотрудник {staffToDelete.Name} успешно удален";
                await LoadCompanyAndStaff();
                showSuccessModal = true;
            }
            else
            {
                errorMessage = "Ошибка при удалении сотрудника";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
    }

    private void Cancel()
    {
        showAddEditDialog = false;
        submitClicked = false;
        errorMessage = string.Empty;
    }

    private void CloseSuccessModal()
    {
        showSuccessModal = false;
        successMessage = string.Empty;
    }
}