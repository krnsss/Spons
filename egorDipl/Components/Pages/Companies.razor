@page "/companies"
@using egorDipl.Data.Models
@inject HttpClient Http
@rendermode InteractiveServer
@inject IUserProvider UserProvider

<head>
    <style>
        body {
            background-color: black;
            color: white;
        }

        html {
            background-color: #000;
            color: #fff;
        }

        a, .btn-link {
            color: #007bff;
        }

        .btn-primary {
            color: #fff;
            background-color: #007bff;
            border-color: #0056b3;
        }

        .btn:focus, .btn:active:focus, .btn-link.nav-link:focus, .form-control:focus, .form-check-input:focus {
            box-shadow: 0 0 0 0.1rem white, 0 0 0 0.25rem #007bff;
        }

        .content {
            padding-top: 1.1rem;
        }

        h1:focus {
            outline: none;
        }

        .valid.modified:not([type=checkbox]) {
            outline: 1px solid #26b050;
        }

        .invalid {
            outline: 1px solid #ff0000;
        }

        .validation-message {
            color: #ff0000;
        }

        table {
            width: 100%;
            margin-top: 1rem;
            border-collapse: separate;
            border-spacing: 0;
            border-radius: 8px;
            overflow: hidden;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
        }

        thead {
            background-color: #007bff;
            color: white;
        }

        tbody tr {
            background-color: #222;
            border-bottom: 1px solid #333;
        }

            tbody tr:hover {
                background-color: #333;
            }

        th {
            font-size: 1.1rem;
            font-weight: bold;
        }

        .edit, .delete {
            padding: 6px 12px;
            font-size: 0.9rem;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            margin-right: 5px;
        }

        .edit {
            background-color: #28a745;
            color: white;
        }

            .edit:hover {
                background-color: #218838;
            }

        .delete {
            background-color: #dc3545;
            color: white;
        }

            .delete:hover {
                background-color: #c82333;
            }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .modal-content {
            background-color: #333;
            color: white;
            padding: 20px;
            border-radius: 8px;
            width: 400px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

            .modal-content h3 {
                margin-top: 0;
            }

        .modal input,
        .modal select,
        .modal button {
            width: 100%;
            margin-bottom: 10px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #007bff;
            background-color: #222;
            color: white;
        }

        .modal button {
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
        }

            .modal button:hover {
                background-color: #0056b3;
            }

        .cancel {
            background-color: #6c757d;
        }

            .cancel:hover {
                background-color: #5a6268;
            }

        button.primary {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            button.primary:hover {
                background-color: #218838;
            }

        h3 {
            text-align: center;
        }

        .blazor-error-boundary {
            display: none;
        }
    </style>
</head>

<h3>Компании</h3>

@if (UserProvider.Role != null)
{
    @if (UserProvider.Role.Name != "Пользователь")
    {
        <button class="primary" @onclick="AddCompany">Добавить компанию</button>
    }

}

@if (companies == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Название</th>
                <th>Адрес</th>
                <th>Число событий</th>
                <th>Отзывы</th>
                <th>Рейтинг</th>

                @if (UserProvider.Role != null)
                {
                    @if (UserProvider.Role.Name != "Пользователь")
                    {
                        <th>Действия</th>
                    }

                }
            </tr>
        </thead>
        <tbody>
            @foreach (var company in companies)
            {
                <tr>
                    <td>@company.Id</td>
                    <td>@company.Name</td>
                    <td>@company.Address</td>
                    <td>@company.CountEvents</td>
                    <td>@company.FeedBacksCount</td>
                    <td>@company.Rating</td>

                    @if (UserProvider.Role != null)
                    {
                        @if (UserProvider.Role.Name != "Пользователь")
                        {
                            <td>
                                <button class="edit" @onclick="() => EditCompany(company.Id)">Редактировать</button>
                                <button class="delete" @onclick="() => DeleteCompany(company.Id)">Удалить</button>
                            </td>
                        }

                    }
                </tr>
            }
        </tbody>
    </table>
}


@if (showAddEditDialog)
{
    <div class="modal">
        <div class="modal-content">
            <h3>@(selectedCompany.Id == 0 ? "Добавить компанию" : "Редактировать компанию")</h3>

            <label>Название</label>
            <input @bind="selectedCompany.Name" maxlength="50" oninput="this.value=this.value.replace(/[^A-Za-zА-Яа-яЁё]/g,'')" class="@GetInputClass(selectedCompany.Name)" />
            @if (string.IsNullOrEmpty(selectedCompany.Name))
            {
                <div class="error-text" style="color: red;">Введите корректные данные</div>
            }

            <label>Адрес</label>
            <input @bind="selectedCompany.Address" maxlength="50" oninput="this.value=this.value.replace(/[^A-Za-zА-Яа-яЁё]/g,'')" class="@GetInputClass(selectedCompany.Address)" />
            @if (string.IsNullOrEmpty(selectedCompany.Address))
            {
                <div class="error-text" style="color: red;">Введите корректные данные</div>
            }

            <label>Число событий</label>
            <input @bind="selectedCompany.CountEvents" maxlength="3" oninput="this.value=this.value.replace(/[^0-9]/g,'')" class="@GetInputClass(selectedCompany.CountEvents)" />

            <label>Отзывы</label>
            <input @bind="selectedCompany.FeedBacksCount" maxlength="4" oninput="this.value=this.value.replace(/[^0-9]/g,'')" class="@GetInputClass(selectedCompany.FeedBacksCount)" />

            <label>Рейтинг</label>
            <input @bind="selectedCompany.Rating" maxlength="1" oninput="this.value=this.value.replace(/[^0-9]/g,'')" class="@GetInputClass(selectedCompany.Rating)" />

            <button class="save" @onclick="SaveCompany">Сохранить</button>
            <button class="cancel" @onclick="Cancel">Отмена</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message" style="color: red;">@errorMessage</div>
            }
        </div>
    </div>
}

@code {
    private List<Company> companies = new();
    private Company selectedCompany = new();
    private bool showAddEditDialog = false;
    private string errorMessage = string.Empty;

    private string GetInputClass(object value)
    {
        if (value == null) return "input-error";
        if (value is int intValue && intValue == 0) return "input-error";
        return string.IsNullOrEmpty(value.ToString()) ? "input-error" : string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        companies = await Http.GetFromJsonAsync<List<Company>>("api/Company");
    }

    private void AddCompany()
    {
        selectedCompany = new Company();
        showAddEditDialog = true;
    }

    private async Task EditCompany(int id)
    {
        selectedCompany = await Http.GetFromJsonAsync<Company>($"api/Company/{id}");
        showAddEditDialog = true;
    }

    private async Task SaveCompany()
    {
        if (string.IsNullOrEmpty(selectedCompany.Name) || string.IsNullOrEmpty(selectedCompany.Name))
        {
            errorMessage += "Поля не должны быть пустыми. ";
            return;
        }

        if (selectedCompany.Name == " " || selectedCompany.Address == " ")
        {
            errorMessage += "Заполните все поля. ";
            return;
        }
        if (selectedCompany.Id == 0)
        {
            await Http.PostAsJsonAsync("api/Company", selectedCompany);
        }
        else
        {
            await Http.PutAsJsonAsync($"api/Company/{selectedCompany.Id}", selectedCompany);
        }

        showAddEditDialog = false;
        await LoadCompanies();
    }

    private async Task DeleteCompany(int id)
    {
        await Http.DeleteAsync($"api/Company/{id}");
        await LoadCompanies();
    }

    private void Cancel()
    {
        showAddEditDialog = false;
    }
}
