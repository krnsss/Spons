@page "/merops"
@using egorDipl.Data.Models
@inject HttpClient Http
@inject IUserProvider UserProvider
@rendermode InteractiveServer

<head>
    <style>
        body {
            background-color: black;
            color: white;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }

        .container {
            display: flex;
            min-height: 100vh;
        }

        .filters {
            width: 300px;
            padding: 20px;
            background-color: #111;
            border-right: 1px solid #333;
            font-family: Nozhik;
            font-size: 2em;
        }

        .filter-section {
            margin-bottom: 20px;
        }

            .filter-section h3 {
                color: #007bff;
                margin-bottom: 10px;
                font-family: Nozhik;
                font-size: 1.2em;
            }

        .filter-option {
            margin-bottom: 8px;
        }

            .filter-option label {
                display: block;
                margin-bottom: 5px;
            }

            .filter-option select,
            .filter-option input {
                width: 100%;
                padding: 8px;
                background-color: #222;
                color: white;
                border: 1px solid #333;
                border-radius: 4px;
            }

        .content {
            flex: 1;
            padding: 20px;
        }

        .search-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            align-items: center;
            flex-direction: row;
        }

        .sort-dropdown {
            position: relative;
            display: inline-block;
            order: 1;
            background:
        }

        .search-bar {
            flex: 1;
            display: flex;
            position: relative;
            order: 2;
        }

        .search-bar {
            flex: 1;
            display: flex;
            position: relative;
        }

            .search-bar input {
                flex: 1;
                padding: 10px;
                background-color: #222;
                color: white;
                border: 1px solid #333;
                border-radius: 4px;
                padding-right: 30px;
            }

            .search-bar .clear-btn {
                position: absolute;
                right: 8px;
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                color: #aaa;
                cursor: pointer;
                font-size: 16px;
                padding: 0 5px;
            }

                .search-bar .clear-btn:hover {
                    color: white;
                }

        .sort-dropdown {
            position: relative;
            display: inline-block;
            background: rgba(0, 123, 255, 0.3);
        }

        .sort-btn {
            padding: 10px 15px;
            background-color: #333;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

            .sort-btn:hover {
                background-color: #444;
            }

        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: #222;
            min-width: 200px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            border-radius: 4px;
            padding: 10px 0;
        }

            .dropdown-content.show {
                display: block;
            }

        .dropdown-item {
            padding: 8px 16px;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
        }

            .dropdown-item:hover {
                background-color: #333;
            }

            .dropdown-item.active {
                background-color: #007bff;
            }

        .reset-btn {
            color: #ff4444;
            margin-top: 5px;
            border-top: 1px solid #444;
            padding-top: 8px;
        }

            .reset-btn:hover {
                color: #ff6666;
            }

        .events-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        .event-card {
            background-color: #222;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s;
            position: relative;
        }

            .event-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0, 123, 255, 0.3);
            }

            .event-card h3 {
                color: #007bff;
                margin-top: 0;
                margin-bottom: 10px;
            }

        .event-detail {
            margin-bottom: 8px;
            font-size: 0.95rem;
        }

            .event-detail strong {
                color: #aaa;
            }

        .event-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
        }

        .btn-request {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }

            .btn-request:hover {
                background-color: #218838;
            }

        .admin-actions {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .admin-btn {
            padding: 10px 15px;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        .add-btn {
            background-color: #28a745;
            color: white;
        }

        .edit-btn {
            background-color: #ffc107;
            color: black;
        }

        .delete-btn {
            background-color: #dc3545;
            color: white;
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .modal-content {
            background-color: #333;
            color: white;
            padding: 0;
            border-radius: 8px;
            width: 450px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .modal-header {
            background-color: #222;
            padding: 15px 20px;
            text-align: center;
            border-bottom: 1px solid #444;
        }

            .modal-header h3 {
                margin: 0;
                font-size: 1.3rem;
                color: #007bff;
            }

        .modal-body {
            padding: 20px;
        }

        .readonly-field {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #444;
        }

            .readonly-field label {
                display: block;
                color: #aaa;
                font-size: 0.9rem;
                margin-bottom: 5px;
            }

            .readonly-field span {
                display: block;
                font-size: 1rem;
            }

        textarea {
            width: calc(100% - 22px);
            height: 120px;
            padding: 10px;
            background-color: #222;
            color: white;
            border: 1px solid #444;
            border-radius: 4px;
            resize: none;
            overflow-y: auto;
            margin-bottom: 15px;
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

            .modal-actions button {
                padding: 8px 15px;
                border-radius: 4px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 8px;
                font-weight: bold;
                border: none;
                width: 100px;
            }

            .modal-actions .save {
                background-color: #28a745;
                color: white;
            }

                .modal-actions .save:hover {
                    background-color: #218838;
                }

            .modal-actions .cancel {
                background-color: #dc3545;
                color: white;
            }

                .modal-actions .cancel:hover {
                    background-color: #c82333;
                }

        }

        .modal input,
        .modal select,
        .modal button {
            width: 100%;
            margin-bottom: 10px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #007bff;
            background-color: #222;
            color: white;
        }

        .modal button {
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
        }

            .modal button:hover {
                background-color: #0056b3;
            }

        .cancel {
            background-color: #6c757d;
        }

            .cancel:hover {
                background-color: #5a6268;
            }

        .your-event-tag {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #28a745;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .reset-filters-btn {
            width: 100%;
            padding: 10px;
            margin-top: 20px;
            background-color: #333;
            color: #ff4444;
            border: 1px solid #ff4444;
            border-radius: 4px;
            cursor: pointer;
        }

            .reset-filters-btn:hover {
                background-color: #444;
            }

        .admin-actions {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .admin-btn {
            padding: 10px 15px;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        .add-btn {
            background-color: #28a745;
            color: white;
        }

        .btn-request {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }

            .btn-request:hover {
                background-color: #218838;
            }

        .tags-section {
            margin-top: 20px;
        }

        .tags-category {
            margin-bottom: 15px;
        }

        .tags-category-name {
            font-weight: bold;
            margin-bottom: 5px;
            color: #007bff;
        }

        .tags-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .tag-item {
            padding: 5px 10px;
            background-color: #333;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.2s;
            border: 1px solid #444;
        }

            .tag-item:hover {
                background-color: #444;
            }

            .tag-item.selected {
                background-color: #007bff;
                color: white;
                border-color: #007bff;
            }

        .selected-tags {
            margin-top: 15px;
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .selected-tag {
            padding: 5px 10px;
            background-color: #007bff;
            border-radius: 15px;
            color: white;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .selected-tag-remove {
            cursor: pointer;
            font-size: 12px;
        }
    </style>
</head>

<PageTitle>Мероприятия</PageTitle>

<div class="container">
    <div class="filters">
        <h2>Фильтры</h2>

        <div class="filter-section">
            <h3>Дата</h3>
            <div class="filter-option">
                <label>От</label>
                <input type="date" @bind="dateFrom" />
            </div>
            <div class="filter-option">
                <label>До</label>
                <input type="date" @bind="dateTo" />
            </div>
        </div>

        <div class="filter-section">
            <h3>Статус</h3>
            <div class="filter-option">
                <select @bind="selectedStatusId">
                    <option value="">Все статусы</option>
                    @foreach (var status in statuses)
                    {
                        <option value="@status.Id">@status.Name</option>
                    }
                </select>
            </div>
        </div>

        <div class="filter-section">
            <h3>Организатор</h3>
            <div class="filter-option">
                <select @bind="selectedOrganizerId">
                    <option value="">Все организаторы</option>
                    @foreach (var company in companies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                </select>
            </div>
        </div>

        <button class="reset-filters-btn" @onclick="ResetFilters">Сбросить фильтры</button>
    </div>

    <div class="content">
        <div class="search-container">
            <div class="sort-dropdown">
                <button class="sort-btn" @onclick="ToggleSortDropdown">
                    @GetSortButtonText()
                    <span>▼</span>
                </button>
                <div class="dropdown-content @(showSortDropdown ? "show" : "")">
                    <div class="dropdown-item @(selectedSort == "date_asc" ? "active" : "")"
                         @onclick='() => SetSort("date_asc")'>
                        По дате (сначала ближайшие)
                    </div>
                    <div class="dropdown-item @(selectedSort == "date_desc" ? "active" : "")"
                         @onclick='() => SetSort("date_desc")'>
                        По дате (сначала дальние)
                    </div>
                    <div class="dropdown-item @(selectedSort == "name_asc" ? "active" : "")"
                         @onclick='() => SetSort("name_asc")'>
                        По названию (A-Я)
                    </div>
                    <div class="dropdown-item @(selectedSort == "name_desc" ? "active" : "")"
                         @onclick='() => SetSort("name_desc")'>
                        По названию (Я-А)
                    </div>
                    <div class="dropdown-item @(selectedSort == "status" ? "active" : "")"
                         @onclick='() => SetSort("status")'>
                        По статусу
                    </div>
                    <div class="dropdown-item reset-btn" @onclick="ResetSort">
                        Сбросить
                    </div>
                </div>
            </div>

            <div class="search-bar">
                <input type="text" placeholder="Поиск мероприятий..."
                       @bind="searchQuery" @oninput="HandleSearchInput" />
                @if (!string.IsNullOrEmpty(searchQuery))
                {
                    <button class="clear-btn" @onclick="ClearSearch">×</button>
                }
            </div>


        </div>

        <div class="events-grid">
            @foreach (var eventItem in filteredEvents)
            {
                <div class="event-card">
                    @if (IsCurrentUserEvent(eventItem))
                    {
                        <div class="your-event-tag">Ваше</div>
                    }

                    <h3>@eventItem.Name</h3>

                    <div class="event-detail">
                        <strong>Описание: </strong> @eventItem.Description
                    </div>

                    <div class="event-detail">
                        <strong>Организатор: </strong>
                        @if (eventItem.OrganizerId != null)
                        {
                            @GetOrganizerName((int)eventItem.OrganizerId)
                        }
                    </div>

                    <div class="event-detail">
                        <strong>Спонсор: </strong>
                        @if (eventItem.SponsorId != null)
                        {
                            @GetSponsorName((int)eventItem.SponsorId)
                        }
                    </div>

                    <div class="event-detail">
                        <strong>Статус: </strong>
                        @if (eventItem.StatusId != null)
                        {
                            @GetStatusName((int)eventItem.StatusId)
                        }
                    </div>

                    <div class="event-detail">
                        <strong>Дата: </strong> @eventItem.Date.ToString("yyyy-MM-dd HH:mm")
                    </div>

                    @if (UserProvider.Role != null && UserProvider.Role.Name != "Пользователь")
                    {
                        <div class="event-actions">
                            <button class="btn-request" @onclick="() => CreateRequest(eventItem.Id)">Подать заявку</button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@if (UserProvider.Role != null && UserProvider.Role.Name != "Пользователь")
{
    <div class="admin-actions">
        <button class="admin-btn add-btn" @onclick="AddEvent" title="Добавить мероприятие">+</button>
    </div>
}

@if (showAddRequest)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Заявка на сотрудничество</h3>
            </div>

            <div class="modal-body">
                <div class="readonly-field">
                    <label>Мероприятие</label>
                    <span>@selectedEvent?.Name</span>
                </div>

                <div class="readonly-field">
                    <label>Компания</label>
                    <span>@selectedEvent?.Organizer?.Name</span>
                </div>

                <div class="readonly-field">
                    <label>Дата отправки</label>
                    <span>@DateTime.Now.ToString("dd.MM.yyyy HH:mm")</span>
                </div>

                <label>Сообщение</label>
                <textarea @bind="newRequest.RequestForCooperation.TextLetter"
                          maxlength="500"
                          placeholder="Введите текст заявки...">
                        </textarea>
                @if (submitClicked && string.IsNullOrEmpty(newRequest.RequestForCooperation.TextLetter))
                {
                    <div class="validation-message" style="color: red;">Заполните поле</div>
                }

                <div class="modal-actions">
                    <button class="save" @onclick="SendRequest">
                        <i class="icon-send"></i> Отправить
                    </button>
                    <button class="cancel" @onclick="CloseModal">
                        <i class="icon-cancel"></i> Отмена
                    </button>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message" style="color: red; margin-top: 10px;">@errorMessage</div>
                }
            </div>
        </div>
    </div>
}

@if (showAddEditDialog)
{
        <div class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>@(selectedEvent.Id == 0 ? "Добавить мероприятие" : "Редактировать мероприятие")</h3>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label>Название</label>
                        <input id="eventName" @bind="selectedEvent.Name" maxlength="50"
                               oninput="this.value=this.value.replace(/[^а-яА-Яa-zA-Z0-9 ()]/g,'').replace(/([ ()])\1+/g,'$1')" />
                        @if (submitClicked && string.IsNullOrEmpty(selectedEvent.Name))
                        {
                            <div class="validation-message" style="color: red;">Заполните поле</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Описание</label>
                        <input id="eventDesc" @bind="selectedEvent.Description" maxlength="100"
                               oninput="this.value=this.value.replace(/[^а-яА-Яa-zA-Z0-9 ()]/g,'').replace(/([ ()])\1+/g,'$1')" />
                        @if (submitClicked && string.IsNullOrEmpty(selectedEvent.Description))
                        {
                            <div class="validation-message" style="color: red;">Заполните поле</div>
                        }
                    </div>

                    <div class="form-group">
                        <label>Организатор</label>
                        <select @bind="selectedEvent.OrganizerId" class="@GetFieldClass(selectedEvent.OrganizerId)">
                            <option value="" disabled selected hidden>Выберите организатора</option>
                            @foreach (var company in companies)
                            {
                                <option value="@company.Id" selected="@(company.Id == companyId)">@company.Name</option>
                            }
                        </select>
                    </div>

                    @if (UserProvider.Role != null && UserProvider.Role.Name != "Владелец")
                    {
                        <div class="form-group">
                            <label>Спонсор:</label>
                            <select @bind="selectedEvent.SponsorId" class="@GetFieldClass(selectedEvent.SponsorId)">
                                <option value="" disabled selected hidden>Выберите спонсора</option>
                                @foreach (var company in companies)
                                {
                                    <option value="@company.Id">@company.Name</option>
                                }
                            </select>
                        </div>
                    }

                    <div class="form-group">
                        <label>Статус:</label>
                        <select @bind="selectedEvent.StatusId" class="@GetFieldClass(selectedEvent.StatusId)">
                            <option value="">Выберите статус</option>
                            @foreach (var status in statuses)
                            {
                                <option value="@status.Id">@status.Name</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Дата:</label>
                        <input id="eventDate" type="datetime-local" @bind="selectedEvent.Date"
                               min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" max="2030-12-31T23:59" />
                        @if (submitClicked && selectedEvent.Date == default)
                        {
                            <div class="validation-message" style="color: red;">Заполните поле</div>
                        }
                    </div>

                <!-- Секция выбора тегов -->
                <div class="form-group tags-section">
                    <label>Теги мероприятия:</label>

                    @if (selectedTags.Any())
                    {
                        <div class="selected-tags">
                            @foreach (var tag in selectedTags)
                            {
                                <div class="selected-tag">
                                    @tag.Name
                                    <span class="selected-tag-remove" @onclick="() => RemoveTag(tag.Id)">×</span>
                                </div>
                            }
                        </div>
                    }

                    <div class="tags-container">
                        @foreach (var tag in allTags)
                        {
                            <div class="tag-item @(selectedTags.Any(t => t.Id == tag.Id) ? "selected" : "")"
                                 @onclick="() => ToggleTagSelection(tag)">
                                @tag.Name
                            </div>
                        }
                    </div>
                </div>

                <div class="modal-actions">
                    <button class="save" @onclick="ValidateAndSave">Сохранить</button>
                    <button class="cancel" @onclick="Cancel">Отмена</button>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message" style="color: red;">@errorMessage</div>
                }
            </div>
        </div>
    </div>
}

@if (UserProvider.Role != null && UserProvider.Role.Name != "Пользователь")
{
    <div class="admin-actions">
        <button class="admin-btn add-btn" @onclick="AddEvent" title="Добавить мероприятие">+</button>
    </div>
}

@code {
    private List<Event> events = new();
    private List<Event> filteredEvents = new();
    private List<Company> companies = new();
    private List<EventStatus> statuses = new();
    private List<User> users = new();
    private User user = new();
    private Event selectedEvent = new();
    private bool showAddEditDialog = false;
    private bool showAddRequest = false;
    private bool showSortDropdown = false;
    private string selectedSort = "date_asc";
    private DateTime? dateFrom;
    private DateTime? dateTo;
    private int? selectedStatusId;
    private int? selectedOrganizerId;
    private string searchQuery = string.Empty;

    // Новые поля для работы с тегами
    private List<Tags> allTags = new();
    private List<Tags> selectedTags = new();
    private List<EventTag> eventTagsToAdd = new();
    private List<EventTag> eventTagsToRemove = new();

    private int? companyId = 0;

    private bool submitClicked = false;
    private string errorMessage = string.Empty;
    private RequestForCooperationRequest newRequest = new() { RequestForCooperation = new RequestForCooperation() { TextLetter = string.Empty } };

    protected override async Task OnInitializedAsync()
    {
        await LoadAllTags(); // Сначала загружаем все теги
        await LoadEvents();
        await LoadCompanies();
        await LoadStatuses();

        if (UserProvider.Role?.Name == "Владелец")
        {
            users = await Http.GetFromJsonAsync<List<User>>("api/User");
            user = users.FirstOrDefault(u => u.UniCode == Convert.ToInt32(UserProvider.Name));
        }
    }

    private async Task LoadAllTags()
    {
        try
        {
            allTags = await Http.GetFromJsonAsync<List<Tags>>("api/Tags") ?? new List<Tags>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке тегов: {ex.Message}");
            allTags = new List<Tags>();
        }
    }

    private async Task LoadEventTags(int eventId)
    {
        var eventTags = await Http.GetFromJsonAsync<List<EventTag>>($"api/EventTag/event/{eventId}") ?? new List<EventTag>();
        selectedTags = eventTags.Select(et => allTags.FirstOrDefault(t => t.Id == et.TagId)).Where(t => t != null).ToList();
    }

    private void ToggleTagSelection(Tags tag)
    {
        if (selectedTags.Any(t => t.Id == tag.Id))
        {
            selectedTags.RemoveAll(t => t.Id == tag.Id);
            eventTagsToAdd.RemoveAll(et => et.TagId == tag.Id);
            eventTagsToRemove.Add(new EventTag { TagId = tag.Id, EventId = selectedEvent.Id });
        }
        else
        {
            selectedTags.Add(tag);
            eventTagsToRemove.RemoveAll(et => et.TagId == tag.Id);
            eventTagsToAdd.Add(new EventTag { TagId = tag.Id, EventId = selectedEvent.Id });
        }
    }

    private void RemoveTag(int tagId)
    {
        var tag = selectedTags.FirstOrDefault(t => t.Id == tagId);
        if (tag != null)
        {
            selectedTags.Remove(tag);
            eventTagsToAdd.RemoveAll(et => et.TagId == tagId);
            eventTagsToRemove.Add(new EventTag { TagId = tagId, EventId = selectedEvent.Id });
        }
    }

    private async Task SaveEventTags()
    {
        // Удаляем теги, которые нужно убрать
        foreach (var tagToRemove in eventTagsToRemove)
        {
            if (tagToRemove.Id > 0) // Если это существующая связь
            {
                await Http.DeleteAsync($"api/EventTag/{tagToRemove.Id}");
            }
            else // Если это новая связь, которую еще не сохраняли
            {
                var existingTag = await Http.GetFromJsonAsync<EventTag>($"api/EventTag/{selectedEvent.Id}/{tagToRemove.TagId}");
                if (existingTag != null)
                {
                    await Http.DeleteAsync($"api/EventTag/{existingTag.Id}");
                }
            }
        }
        // Добавляем новые теги
        foreach (var tagToAdd in eventTagsToAdd)
        {
            var newEventTag = new EventTag
            {
                EventId = selectedEvent.Id,
                TagId = tagToAdd.TagId
            };
            await Http.PostAsJsonAsync("api/EventTag", newEventTag);
        }

        // Очищаем списки после сохранения
        eventTagsToAdd.Clear();
        eventTagsToRemove.Clear();
    }


    private void AddEvent()
    {
        selectedEvent = new Event();
        showAddEditDialog = true;
    }

    private async Task CreateRequest(int id)
    {
        selectedEvent = await Http.GetFromJsonAsync<Event>($"api/Event/{id}");
        showAddRequest = true;
    }

    private string GetSortButtonText()
    {
        return selectedSort switch
        {
            "date_asc" => "По дате (ближ.)",
            "date_desc" => "По дате (дальн.)",
            "name_asc" => "По названию (A-Я)",
            "name_desc" => "По названию (Я-А)",
            "status" => "По статусу",
            _ => "Сортировка"
        };
    }

    private async Task LoadEvents()
    {
        var allEvents = await Http.GetFromJsonAsync<List<Event>>("api/Event");
        events = allEvents ?? new List<Event>();
        ApplyFiltersAndSort();
    }

    private async Task LoadCompanies()
    {
        companies = await Http.GetFromJsonAsync<List<Company>>("api/Company");
    }

    private async Task LoadStatuses()
    {
        statuses = await Http.GetFromJsonAsync<List<EventStatus>>("api/EventStatus");
    }

    private void ToggleSortDropdown()
    {
        showSortDropdown = !showSortDropdown;
    }

    private void SetSort(string sortOption)
    {
        selectedSort = sortOption;
        showSortDropdown = false;
        ApplyFiltersAndSort();
    }

    private void ResetSort()
    {
        selectedSort = "date_asc";
        showSortDropdown = false;
        ApplyFiltersAndSort();
    }

    private void ResetFilters()
    {
        dateFrom = null;
        dateTo = null;
        selectedStatusId = null;
        selectedOrganizerId = null;
        ApplyFiltersAndSort();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        ApplyFiltersAndSort();
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort();
    }

    private void ApplyFiltersAndSort()
    {
        var filtered = events.AsEnumerable();

        // Применяем фильтр по поисковой строке
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filtered = filtered.Where(e => e.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
        }

        // Применяем фильтр по дате
        if (dateFrom.HasValue)
        {
            filtered = filtered.Where(e => e.Date >= dateFrom.Value);
        }
        if (dateTo.HasValue)
        {
            filtered = filtered.Where(e => e.Date <= dateTo.Value);
        }

        // Применяем фильтр по статусу
        if (selectedStatusId.HasValue)
        {
            filtered = filtered.Where(e => e.StatusId == selectedStatusId.Value);
        }

        // Применяем фильтр по организатору
        if (selectedOrganizerId.HasValue)
        {
            filtered = filtered.Where(e => e.OrganizerId == selectedOrganizerId.Value);
        }

        // Применяем сортировку
        filtered = selectedSort switch
        {
            "date_asc" => filtered.OrderBy(e => e.Date),
            "date_desc" => filtered.OrderByDescending(e => e.Date),
            "name_asc" => filtered.OrderBy(e => e.Name),
            "name_desc" => filtered.OrderByDescending(e => e.Name),
            "status" => filtered.OrderBy(e => e.StatusId),
            _ => filtered.OrderBy(e => e.Date)
        };

        filteredEvents = filtered.ToList();
        StateHasChanged();
    }

    private bool IsCurrentUserEvent(Event eventItem)
    {
        if (UserProvider.Role?.Name == "Владелец" && user?.CompanyId != null)
        {
            return eventItem.OrganizerId == user.CompanyId;
        }
        return false;
    }

    private async Task SendRequest()
    {
        submitClicked = true;

        if (string.IsNullOrEmpty(newRequest.RequestForCooperation.TextLetter))
        {
            return;
        }

        try
        {
            newRequest.RequestForCooperation.EventId = selectedEvent?.Id;
            newRequest.RequestForCooperation.SenderCompanyId = selectedEvent?.OrganizerId;
            newRequest.RequestForCooperation.StatusId = 1;
            newRequest.UserId = UserProvider.UserId;

            var response = await Http.PostAsJsonAsync("api/RequestForCooperation", newRequest);

            if (response.IsSuccessStatusCode)
            {
                newRequest = new();
                CloseModal();
            }
            else
            {
                errorMessage = "Ошибка при отправке заявки";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }

        StateHasChanged();
    }

    private void CloseModal()
    {
        showAddRequest = false;
        StateHasChanged();
    }

    private async Task ValidateAndSave()
    {
        submitClicked = true;
        
        // Проверка обязательных полей
        if (string.IsNullOrEmpty(selectedEvent.Name)) return;
        if (string.IsNullOrEmpty(selectedEvent.Description)) return;
        if (selectedEvent.Date == default) return;

        await SaveEvent();
        await SaveEventTags(); // Сохраняем теги после сохранения мероприятия
    }

    private string GetFieldClass(object fieldValue)
    {
        return submitClicked && string.IsNullOrEmpty(fieldValue?.ToString()) ? "invalid" : "";
    }

    private string GetOrganizerName(int organizerId)
    {
        var organizer = companies.FirstOrDefault(c => c.Id == organizerId);
        return organizer?.Name ?? "Неизвестно";
    }

    private string GetSponsorName(int sponsorId)
    {
        var sponsor = companies.FirstOrDefault(c => c.Id == sponsorId);
        return sponsor?.Name ?? "Неизвестно";
    }

    private string GetStatusName(int statusId)
    {
        var status = statuses.FirstOrDefault(s => s.Id == statusId);
        return status?.Name ?? "Неизвестно";
    }

    private async Task EditEvent(int id)
    {
        selectedEvent = await Http.GetFromJsonAsync<Event>($"api/Event/{id}");
        await LoadEventTags(id); // Загружаем теги для редактируемого мероприятия
        showAddEditDialog = true;
    }



    private async Task SaveEvent()
    {
        try
        {
            if (selectedEvent.Id == 0)
            {
                // Создаем новое мероприятие
                var response = await Http.PostAsJsonAsync("api/Event", selectedEvent);
                if (response.IsSuccessStatusCode)
                {
                    // Получаем созданное мероприятие с ID
                    var createdEvent = await response.Content.ReadFromJsonAsync<Event>();
                    selectedEvent.Id = createdEvent.Id;

                    // Обновляем EventId во временных связях тегов
                    foreach (var tag in eventTagsToAdd)
                    {
                        tag.EventId = selectedEvent.Id;
                    }
                    foreach (var tag in eventTagsToRemove)
                    {
                        tag.EventId = selectedEvent.Id;
                    }

                    showAddEditDialog = false;
                    await LoadEvents();
                }
                else
                {
                    errorMessage = "Ошибка при добавлении мероприятия";
                }
            }
            else
            {
                // Обновляем существующее мероприятие
                var response = await Http.PutAsJsonAsync($"api/Event/{selectedEvent.Id}", selectedEvent);
                if (response.IsSuccessStatusCode)
                {
                    showAddEditDialog = false;
                    await LoadEvents();
                }
                else
                {
                    errorMessage = "Ошибка при обновлении мероприятия";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task DeleteEvent(int id)
    {
        await Http.DeleteAsync($"api/Event/{id}");
        await LoadEvents();
    }

    private void Cancel()
    {
        // Сбрасываем выбранные теги при отмене
        selectedTags.Clear();
        eventTagsToAdd.Clear();
        eventTagsToRemove.Clear();
        showAddEditDialog = false;
    }
}