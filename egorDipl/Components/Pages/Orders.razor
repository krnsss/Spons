@page "/orders"
@using egorDipl.Data.Models
@inject HttpClient Http
@rendermode InteractiveServer

<head>
    <style>
        body {
            background-color: black;
            color: white;
        }

        .table {
            width: 100%;
            margin-top: 1rem;
            border-collapse: separate;
            border-spacing: 0;
            border-radius: 8px;
            overflow: hidden;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
        }

        thead {
            background-color: #007bff;
            color: white;
        }

        tbody tr {
            background-color: #222;
            border-bottom: 1px solid #333;
        }

            tbody tr:hover {
                background-color: #333;
            }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .modal-content {
            background-color: #333;
            color: white;
            padding: 20px;
            border-radius: 8px;
            width: 400px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

            .modal-content h3 {
                margin-top: 0;
                text-align: center;
            }

        .modal input,
        .modal select,
        .modal textarea,
        .modal button {
            width: 100%;
            margin-bottom: 10px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #007bff;
            background-color: #222;
            color: white;
        }

        .modal button {
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
        }

            .modal button:hover {
                background-color: #0056b3;
            }

        .cancel {
            background-color: #6c757d;
        }

            .cancel:hover {
                background-color: #5a6268;
            }

        .primary {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .primary:hover {
                background-color: #218838;
            }

        h3 {
            text-align: center;
        }

        .blazor-error-boundary {
            display: none;
        }
    </style>
</head>

<PageTitle>Запросы на сотрудничество</PageTitle>

<button class="primary" @onclick="AddRequest">Добавить запрос</button>

@if (requests == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Компания-отправитель</th>
                <th>Текст письма</th>
                <th>Мероприятие</th>
                <th>Статус</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in requests)
            {
                <tr>
                    <td>@request.Id</td>
                    <td>@request.SenderCompanyId</td>
                    <td>@request.TextLetter</td>
                    <td>@request.EventId</td>
                    <td>@request.StatusId</td>
                    <td>
                        <button class="edit" @onclick="() => EditRequest(request.Id)">Редактировать</button>
                        <button class="delete" @onclick="() => DeleteRequest(request.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showAddEditDialog)
{
    <div class="modal">
        <div class="modal-content">
            <h3>@(selectedRequest.Id == 0 ? "Добавить запрос" : "Редактировать запрос")</h3>

            <label>Компания-отправитель:</label>
            <select @bind="selectedRequest.SenderCompanyId">
                <option value="">Выберите компанию</option>
                @foreach (var company in companies)
                {
                    <option value="@company.Id">@company.Name</option>
                }
            </select>

            <label>Текст письма:</label>
            <textarea @bind="selectedRequest.TextLetter"></textarea>

            <label>Мероприятие:</label>
            <select @bind="selectedRequest.EventId">
                <option value="">Выберите мероприятие</option>
                @foreach (var ev in events)
                {
                    <option value="@ev.Id">@ev.Name</option>
                }
            </select>

            <label>Статус:</label>
            <select @bind="selectedRequest.StatusId">
                <option value="">Выберите статус</option>
                @foreach (var status in statuses)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </select>

            <button class="primary" @onclick="SaveRequest">Сохранить</button>
            <button class="cancel" @onclick="Cancel">Отмена</button>
        </div>
    </div>
}

@code {
    private List<RequestForCooperation> requests = new();
    private List<Company> companies = new();
    private List<Event> events = new();
    private List<RequestStatus> statuses = new();
    private RequestForCooperation selectedRequest = new();
    private bool showAddEditDialog = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
        await LoadCompanies();
        await LoadEvents();
        await LoadStatuses();
    }

    private async Task LoadRequests()
    {
        requests = await Http.GetFromJsonAsync<List<RequestForCooperation>>("api/RequestForCooperation");
    }

    private async Task LoadCompanies()
    {
        companies = await Http.GetFromJsonAsync<List<Company>>("api/Company");
    }

    private async Task LoadEvents()
    {
        events = await Http.GetFromJsonAsync<List<Event>>("api/Event");
    }

    private async Task LoadStatuses()
    {
        statuses = await Http.GetFromJsonAsync<List<RequestStatus>>("api/RequestStatus");
    }

    private void AddRequest()
    {
        selectedRequest = new RequestForCooperation();
        showAddEditDialog = true;
    }

    private async Task EditRequest(int id)
    {
        selectedRequest = await Http.GetFromJsonAsync<RequestForCooperation>($"api/RequestForCooperation/{id}");
        showAddEditDialog = true;
    }

    private async Task SaveRequest()
    {
        if (selectedRequest.Id == 0)
        {
            await Http.PostAsJsonAsync("api/RequestForCooperation", selectedRequest);
        }
        else
        {
            await Http.PutAsJsonAsync($"api/RequestForCooperation/{selectedRequest.Id}", selectedRequest);
        }

        showAddEditDialog = false;
        await LoadRequests();
    }

    private async Task DeleteRequest(int id)
    {
        await Http.DeleteAsync($"api/RequestForCooperation/{id}");
        await LoadRequests();
    }

    private void Cancel()
    {
        showAddEditDialog = false;
    }
}
